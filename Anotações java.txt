------------------------------------------------------------------------------------- 
Atalhos Java
------------------------------------------------------------------------------------- 
Troca de perspectiva -> Ctrl+3
Criando o metodo main -> main - Pressiona Ctrl+space
Mudar de lugar -> Seleciona o contéudo Alt+seta para cima
Identação -> Ctrl+shift+f
Importando uma classe -> Ctrl+shift+o

------------------------------------------------------------------------------------- 
#Design Patterns (Souluções já encontradas)
------------------------------------------------------------------------------------- 
* Single Responsability Principle
 - Uma clase deve ter um e somente um motivo para mudar.
 - A classe deve possuir uma única responsabilidade dentro do software.

* Open-Close Principle
 - Voce deve poder estender um comportamento de classe; sem modifica-lo
 - Objetos dem estar abertor para estensão, mas fechados para modificação
 
* Liskov Substitution Principle
 - Classes derivadas devem ser substituíveis por suas classes bases. 
 - O princípio da substituição de Liskov foi introduzido por Barbara Liskov em 1987
 
* Interface Segregation Principle
 - Uma clase não deve ser forçada a implementar interfaces e métodos que não serão utilizadaos.

* Dependency Inversion Principle
 - Um módúlo de alto nivel não deve depender de módulos de baixo nível, ambos devem depender da abstração
 
* 
------------------------------------------------------------------------------------- 
java.util.queue

java.util.LinkedList
	- Garante a Ordem de inserção
	- Utiliza o estilo fila, primeiro que entra é o primeiro que sai
	- Não permite mudança de ordenação

queue<String> fileBanco = new LinkedList<>();

//Adicionando um usuário
filaBanco.add("Mensagem 1");
filaBanco.peek(); //Mostra o primeiro elemento da lista
filaBanco.element(); //
filaBanco.poll(); //Remove o elemneto

FilaBanco.isEmpty(); //Sequencial númerica que retorno se a fila esta vazia


Crinando um Iterator

Iterator<String> interator = filaBanco.iterator(); //Percorre toda a lista de dados 
-------------------------------------------------------------------------------------

Java.uitl.Set
	- java.util.HashSet
	- java.util.TreeSet
	- java.util.LinkedHashSet
- Por padrão não garente Ordem
- Não permite itens repetidos
- Não permite busca por itens e atualização
- Permite adição e rmeoção normalmente
- Para Leitura apenas navegação
- Não permite mudança de ordenação

HashSet - Quando não é necessário manrter uma odernação

LinkedHashSet - Quando é necessário manter a ordem de inserção dos elementos.

TreeSet - Quando é necessário alterar a ordem através do uso de comparators. //Arvore Binaria

---------------------------------------------------------------------------------------
Java util Map -  Não é extendida de Colletion

java.util.HashMap
java.utii.TreeMap
java.util.HashTable

Entrada de chave e valor
Permite valores repetidos, mas não permite repetição de chave
Permite adição, busca por chave ou valor, atualização, rmeoção e navegação.
Pode ser ordenado

MapEstudo.put(Chave(String), valor(inteito)), //Adicionando um valor
MapEstudo.put("Palmeiras",0)                  //Palmeiras não tem mundial
                                              //Para mudar basta dar um pute com a mesma chave
MapEstudo.get("Chave")                        //Retorna a chave
MapEstudo.remove(key: "chave")                //Remove a chave
MapEstudo.containsKey("Chave")                //Retorna um dado booleano - Existe ou não exirte a chave indicada
MapEstudo.constainsValue(valor)               //Retorna um dado bolleano - Existe ou não existe o valor indicado
MapEstudo.size()                              //Retorna o tamanho do Mapa                   
---------------------------------------------------------------------------------------
Interface para ordenação

java.util.comparator
	- interface para definir classe com regra de ordenação
java.util.comparable
	- interface para deedinir regra de ordenação em uma classe de domínio

//Adicionando um elemento na lista
estudante.add(new estudante(nome: "Pedro", idade:19));

//ordenando uma lista por idade
estudante.sort((first, second) -> first.getIndade - second.getIdade());	

//Ordenação reversa
estudante.sort((first, second) -> second.getIdade - first.getIndade());

//Ordenando com comparator
estudante.sort(Comparator.comparingInt(Estudante::getIdade));

//Ordenação reversa com comparator
estudante.sort(Comparator.comparingInt(Estudante::getIdade).reversed());

//Retorna uma lista ordenado qu extend o metodo 
Colletions.sort(estudante);

//Retorna uma lista ordenado porém não é obrigado implementar a inteface comparator
//è passo o objeto e a uma Classe comparator como parametro

Colletions.sort(estudante, new EstudanteOrdemIdadeReversaComparator());

---------------------------------------------------------------------------------------

Optional

Ajuda a trabalhar com dados com podem ser nulo

java.util.optional;

Opitional<String> opitionalString = Optional.of("Precisa sempre ter um valor"); 	
Opitional<String> opitionalString = Optional.ofNullable(null); // Quando tem o probabilidade de ser nulo
Opitional<String> opitionalString = Optional.empty(); // Um novo dado
emptyOptional.idPresentOrElse(System.out::println, () -> System.out.printlm(""));	

---------------------------------------------------------------------------------------

Stream API

Manipulação de coleção com o paradgima funcional de forma paralele

imutável -  Não altera a coleção origem, smepre cria uma nova coleção

Principais funcionalidades

Mapping   - Retorna uma coleção com mesmo tamanho da origem com os elementos alterados
Filtering - Retorna uma coleção igual ou menor que a coleção origem, com elementos intactos
ForEach   - Executa uma determinada logica para cada elemento, retorna nada
Peek      - Executa uma determinada logica para cada elemento, retorna a coleção
Counting  - Retorna um inteiro que represneta a contagem do elemento
Grouping  - Retorna uma coleção agrupada de acordo com a regra

---------------------------------------------------------------------------------------



Spring Boot
Problemas antes do Spring:
Configuração dos beans em arquivos XML
Disptche Sservlet e view resolver em web.xml
setup manual de Banco de dados
mvc

o que é o Spring Boot:
Criado pela Spring Source em 2012.
- Facilita seutp de projetos Sprins
- Sem necessidade de criar arquivos de configuração
-  Foco em produtividade

Spring initializr
Starters: dependências auto configuráveis pelo Spring Boot
Execução simplicada: Sem deploy em servidor externo.
Configurações: arquivos externo para configuração.

aplication.properties

Autoconfiguration

Configuração manual
Stpring MVC: Depatcher Servlet, web.xml, spring-mvc.xml
bens Spring
Spring Data, Spring Security


FatJar 
UberJar.

---------------------------------------------------------------------------------------

Paradigma Funcional no Java


É o processo de contruir software através de composição de funções
puras, evitando compartilhamento de estados, dados mutáveis e efeitos colaterais.
É declarativa ao invés de imperátiva. Eric Elliott

Imperativo
è quele que espressa o codigo através de comandos ao computador, nele é
possivel ter controle de estado dos objetos.

Funcional
Damos uma regra, uma declaração de como queremos que o programa se 
comporte.

Função Pura
Invocada mais de uma vez e produz o mesmo reusltado
